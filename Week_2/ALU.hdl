// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
//    Not16(
//        in[0]=zx,
//        in[1]=zx,
//        in[2]=zx,
//        in[3]=zx,
//        in[4]=zx,
//        in[5]=zx,
//        in[6]=zx,
//        in[7]=zx,
//        in[8]=zx,
//        in[9]=zx,
//        in[10]=zx,
//        in[11]=zx, 
//        in[12]=zx,
//        in[13]=zx,
//        in[14]=zx,
//        in[15]=zx, 
//        out=notZx16);
//    And16(a=x,b=notZx16, out=zxOutput);
//    Xor16 (
//        a=zxOutput,
//        b[0]=nx,
//       b[1]=nx,   
//        b[2]=nx,
//        b[3]=nx,   
//        b[4]=nx,
//        b[5]=nx,  
//        b[6]=nx,
//        b[7]=nx,   
//        b[8]=nx,
//        b[9]=nx,   
//        b[10]=nx,
//        b[11]=nx,  
//        b[12]=nx,
//        b[13]=nx,   
//        b[14]=nx,
//        b[15]=nx, 
//        out=nxOutput); 



//    Not16(
//        in[0]=zy,
//       in[1]=zy,
//        in[2]=zy,
//        in[3]=zy,
//        in[4]=zy,
//        in[5]=zy,
//        in[6]=zy,
//        in[7]=zy,
//        in[8]=zy,
//        in[9]=zy,
//        in[10]=zy,
//        in[11]=zy, 
//        in[12]=zy,
//        in[13]=zy,
//        in[14]=zy,
//        in[15]=zy, 
//        out=notZy16);

//    And16(a=y, b=notZy16, out=zyOutput);
//    Xor16(
//        a=zyOutput,
//        b[0]=ny,
//        b[1]=ny,   
//        b[2]=ny,
//        b[3]=ny,   
//        b[4]=ny,
//        b[5]=ny,  
//        b[6]=ny,
//       b[7]=ny,   
//        b[8]=ny,
//        b[9]=ny,   
//        b[10]=ny,
//        b[11]=ny,  
//        b[12]=ny,
//        b[13]=ny,   
//        b[14]=ny,
//        b[15]=ny, 
//        out=nyOutput);
    Mux16 (a=x, b=false, sel=zx, out=zxOutput);
    Not16 (in=zxOutput, out=notZxOutput);
    Mux16 (a=zxOutput, b=notZxOutput, sel=nx, out=nxOutput);

    Mux16 (a=y, b=false, sel=zy, out=zyOutput);
    Not16 (in=zyOutput, out=notZyOutput);
    Mux16 (a=zyOutput, b=notZyOutput, sel=ny, out=nyOutput);

    And16 (a=nxOutput , b=nyOutput , out =andXAndY);
    Add16 (a=nxOutput , b=nyOutput , out =addXAndY);
    Mux16 (a=andXAndY, b=addXAndY, sel=f, out=addOrAnd);

    Not16 (in=addOrAnd, out=notAddOrAnd);
    Mux16 (a=addOrAnd, b=notAddOrAnd, sel=no, out=out); 
    Mux16 (
        a=addOrAnd, 
        b=notAddOrAnd, 
        sel=no, 
        out[0]=out0,
        out[1]=out1,
        out[2]=out2,
        out[3]=out3,
        out[4]=out4,
        out[5]=out5,
        out[6]=out6,
        out[7]=out7,
        out[8]=out8,
        out[9]=out9,
        out[10]=out10,
        out[11]=out11,
        out[12]=out12,
        out[13]=out13,
        out[14]=out14,
        out[15]=out15);


    // ZR -> Or16Way
    Or8Way(
        in[0]=out0,
        in[1]=out1, 
        in[2]=out2, 
        in[3]=out3,
        in[4]=out4,
        in[5]=out5, 
        in[6]=out6, 
        in[7]=out7, 
        out=orFrom0To7);
    Or8Way(
        in[0]=out8,
        in[1]=out9, 
        in[2]=out10, 
        in[3]=out11,
        in[4]=out12,
        in[5]=out13, 
        in[6]=out14, 
        in[7]=out15,  
        out=orFrom8To15);
    Or(a=orFrom0To7, b=orFrom8To15, out=orFrom0to16);
    Not (in=orFrom0to16, out=zr);

    // NG
    And (a=out15, b=out15, out=ng);


    //// Replace this comment with your code.
}